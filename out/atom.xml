<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>Steve Rubin's blog</title>
	<link href="https://ssrubin.com/atom.xml" rel="self"/>
	<link href="https://ssrubin.com"/>
	<updated>2017-12-12T16:05:22.684Z</updated>
	<id>https://ssrubin.com</id>
	<author>
		<name>Steve Rubin</name>
		<email>srubin@cs.berkeley.edu</email>
	</author>

	
		<entry>
			<title>&quot;Fixing&quot; macOS Bluetooth Headphone Audio Quality Issues with Hammerspoon</title>
			<link href="https://ssrubin.com/posts/fixing-macos-bluetooth-headphone-audio-quality-issues-with-hammerspoon.html"/>
			<updated>2017-04-01T07:00:00.000Z</updated>
			<id>https://ssrubin.com/posts/fixing-macos-bluetooth-headphone-audio-quality-issues-with-hammerspoon.html</id>
			<content type="html">&lt;p&gt;When Apple delayed the AirPods release, I was worried that they were vaporware. &lt;/p&gt;
&lt;p&gt;Well, they weren&amp;#39;t. I got my pair, and I bought in to looking like the San Francisco Tech Model Citizen while walking to work (&lt;a href=&quot;https://www.last.fm/user/StevoX&quot;&gt;listening to San Francisco Tech Model Citizen approved music, of course&lt;/a&gt;). And then I accidentally got another set of Bluetooth headphones, the noise-cancelling Bose QC35, great for the ambient noise in the San Francisco Tech Model Citizen&amp;#39;s Open Office. I wasn&amp;#39;t specifically looking for wireless headphones, but it seemed wrong to buy a brand new pair of headphones that required an adapter to work with my phone (Dear Apple: you win).&lt;/p&gt;
&lt;p&gt;So, in the course of two and a half months I&amp;#39;ve switched completely to wireless headphones. It certainly feels like The Future but macOS isn&amp;#39;t quite up to the task. Notably, when I connect a pair of Bluetooth headphones, the Mac usually automatically sets those headphones as both the system output device and the input device. Unfortunately, macOS then reduces the audio output samplerate to 8000 Hz, down from the usual 44100 Hz. I &lt;em&gt;think&lt;/em&gt; this is a Bluetooth hardware limitation, but I&amp;#39;m not quite sure. Either way: it causes everything to sound like garbage.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../img/macaudio/airpods-8khz.png&quot; alt=&quot;AirPods switch to 8 kHz output samplerate when they&amp;#39;re the input device.&quot;&gt;&lt;/p&gt;
&lt;p&gt;There&amp;#39;s an easy fix, though: once you&amp;#39;ve connected your AirPods or other BT Audio device, switch the input device back to the default input device (the &amp;quot;Internal Microphone&amp;quot;).&lt;/p&gt;
&lt;p&gt;That&amp;#39;s annoying to do automatically, but there&amp;#39;s a great tool called &lt;a href=&quot;http://www.hammerspoon.org&quot;&gt;Hammerspoon&lt;/a&gt; that lets you automate lots of things like this on macOS. Here&amp;#39;s the Hammerspoon script I whipped up (&lt;a href=&quot;https://github.com/srubin/hammersteve&quot;&gt;and on github&lt;/a&gt;):&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs lua&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;-- Avoid automatically setting a bluetooth audio input device&lt;/span&gt;

lastSetDeviceTime = &lt;span class=&quot;hljs-built_in&quot;&gt;os&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;time&lt;/span&gt;()
lastInputDevice = &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;audioDeviceChanged&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(arg)&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;arg&lt;/span&gt; == &lt;span class=&quot;hljs-string&quot;&gt;'dev#'&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;then&lt;/span&gt;
        lastSetDeviceTime = &lt;span class=&quot;hljs-built_in&quot;&gt;os&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;time&lt;/span&gt;()
    &lt;span class=&quot;hljs-keyword&quot;&gt;elseif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;arg&lt;/span&gt; == &lt;span class=&quot;hljs-string&quot;&gt;'dIn '&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;os&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;time&lt;/span&gt;() - lastSetDeviceTime &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;then&lt;/span&gt;
        inputDevice = hs.audiodevice.defaultInputDevice()
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; inputDevice:transportType() == &lt;span class=&quot;hljs-string&quot;&gt;'Bluetooth'&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;then&lt;/span&gt;
            internalMic = lastInputDevice &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; hs.audiodevice.findInputByName(&lt;span class=&quot;hljs-string&quot;&gt;'Built-in Microphone'&lt;/span&gt;)
            internalMic:setDefaultInputDevice()
        &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; hs.audiodevice.defaultInputDevice():transportType() ~= &lt;span class=&quot;hljs-string&quot;&gt;'Bluetooth'&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;then&lt;/span&gt;
        lastInputDevice = hs.audiodevice.defaultInputDevice()
    &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;

hs.audiodevice.watcher.setCallback(audioDeviceChanged)
hs.audiodevice.watcher.start()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you connect a Bluetooth audio device, this script changes the input device to the previously selected input device. If you actually &lt;em&gt;want&lt;/em&gt; to use the microphone on the BT audio device, you can manually change the input device to the Bluetooth headphones, because the script only automatically switches away from those input devices within 2 seconds of an output device change.&lt;/p&gt;
&lt;p&gt;I hope Apple comes up with a nicer way to manage this, but this is a nice and easy fix in the meantime.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>A fast &amp; powerful iTunes replacement with mpd, ncmpcpp, beets, and Alfred</title>
			<link href="https://ssrubin.com/posts/music-library-with-mpd-ncmpcpp-beets.html"/>
			<updated>2016-06-25T07:00:00.000Z</updated>
			<id>https://ssrubin.com/posts/music-library-with-mpd-ncmpcpp-beets.html</id>
			<content type="html">&lt;p&gt;I used Windows until 2009, and I was used to disliking iTunes. I figured that Apple was doing the minimum amount of work required to support iPods on Windows. After switching to OS X (macOS), I realized that iTunes just isn&amp;#39;t meant to be &lt;em&gt;just&lt;/em&gt; a music player and organizer. It does those things, but it&amp;#39;s also a tool for syncing media to your phone, a streaming music service, and a weird social network. It&amp;#39;s a music store, a book store, a video store, an app store, a podcast store, a music video store, an audiobook store, and whatever iTunes U is.&lt;/p&gt;
&lt;p&gt;All of these functions get in the way of the features that I care most about and use on a daily basis: organizing and playing music. The more recent iTunes redesign is pretty (it&amp;#39;s hard to dislike the auto-selected colors for the album view) but overall, the software is a bloated usability tire fire.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../img/musiclibrary/iTunes.png&quot; alt=&quot;iTunes automatic color-matching for albums looks nice&quot;&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve pieced together a fast and powerful replacement to iTunes using a bunch of open source software (mpd, ncmpcpp, and beets) and my favorite do-everything macOS assistant, Alfred. This all presupposes that you, like me, still care about maintaining a collection of digital music files. Otherwise, just get Spotify and move along.&lt;/p&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;
&lt;p&gt;This guide assumes you can comfortably edit files, create folders, and run commands in Terminal.&lt;/p&gt;
&lt;p&gt;To install the open source software I reference here, you need to first install &lt;a href=&quot;http://brew.sh&quot;&gt;homebrew&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;library-management&quot;&gt;Library management&lt;/h2&gt;
&lt;p&gt;It&amp;#39;s hard to maintain a clean library of digital music. When you&amp;#39;re ripping your own CDs you generally get accurate tag metadata, but we&amp;#39;ve all downloaded albums that are mistagged or untagged. I&amp;#39;m not even talking about illegal downloads: I&amp;#39;ve purchased albums from band and record label websites that have no id3 tags at all.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://beets.io&quot;&gt;Beets&lt;/a&gt; is an open source music library management tool. It takes care of all the tag gobbledy-gook that we need. To install it, enter the following commands in Terminal:&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs bash&quot;&gt;brew install python
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs bash&quot;&gt;pip install beets
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, create a folder where you want to keep all of your music. On my computer, I created a folder called &lt;code&gt;beets&lt;/code&gt; in &lt;code&gt;~/Music&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../img/musiclibrary/folder.png&quot; alt=&quot;My beets music folder&quot;&gt;&lt;/p&gt;
&lt;p&gt;We need to configure beets. Create or edit &lt;code&gt;~/.config/beets/config.yaml&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs yaml&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;directory:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;~/Music/beets&lt;/span&gt;                   &lt;span class=&quot;hljs-comment&quot;&gt;# Where does the music live?&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;library:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;~/Dropbox/beets/musiclibrary.blb&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;# Where does the beets database live?&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;import:&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;    move:&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;yes&lt;/span&gt;                              &lt;span class=&quot;hljs-comment&quot;&gt;# Move your files to ~/Music/beets after import&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;plugins:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;lastgenre&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;fetchart&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;ftintitle&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;mpdupdate&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;smartplaylist&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;embedart&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;embedart:&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;    auto:&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;yes&lt;/span&gt;                              &lt;span class=&quot;hljs-comment&quot;&gt;# Embed album art in the music files&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To add an album to your new beets music library, run the following in Terminal:&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs bash&quot;&gt;beet import ~/Downloads/Car\ Seat\ Headrest\ -\ Teens\ Of\ Denial
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Beets will match your album to an online database and correct its tags. If beets is unsure about what the album is, you&amp;#39;ll get a prompt to verify the information. You can also add a bunch of albums all at once, e.g.:&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs bash&quot;&gt;beet import ~/Music/iTunes/iTunes\ Media
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;playback&quot;&gt;Playback&lt;/h2&gt;
&lt;p&gt;Once you have a perfectly organized and tagged music library, you&amp;#39;ll probably want some way to play it. This is where mpd comes in. &lt;a href=&quot;https://www.musicpd.org&quot;&gt;Mpd&lt;/a&gt; is a piece of software that runs in the background and plays music. It&amp;#39;s fast and lightweight—you&amp;#39;re certainly not going to miss iTunes in that department.&lt;/p&gt;
&lt;p&gt;First install mpd:&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs bash&quot;&gt;brew install mpd mpc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Homebrew will let you know that mpd successfully installed, and give you a line to copy/paste into Terminal that will automatically start mpd when you start your computer. Do that.&lt;/p&gt;
&lt;p&gt;Then create and edit &lt;code&gt;~/.mpdconf&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs undefined&quot;&gt;music_directory &quot;~/Music/beets&quot;        # Beets music library folder
playlist_directory &quot;~/.mpd/playlists&quot;  # Where do playlists live?
db_file &quot;~/.mpd/database&quot;              
pid_file &quot;~/.mpd/pid&quot;                  
state_file &quot;~/.mpd/state&quot;
sticker_file &quot;~/.mpd/sticker.sql&quot;
port &quot;6600&quot;                          
auto_update &quot;yes&quot;
audio_output {
         type &quot;osx&quot;
         name &quot;My Mac Device&quot;
         mixer_type &quot;software&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, update your beets configuration (&lt;code&gt;~/.config/beets/config.yaml&lt;/code&gt;) to work with mpd:&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs yaml&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;mpdupdate:&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;    host:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;localhost&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;    port:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6600&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make sure that mpd is updated with all your music from beets:&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs bash&quot;&gt;mpc update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The key thing to remember about mpd is that it runs and plays music in the background. There&amp;#39;s no user interface to mpd: you need to use a client to control it. When you use a client, you&amp;#39;re sending commands to mpd about what to play; so you can open and close clients freely without stopping playback. It&amp;#39;s like if you could quit iTunes and still have your music playing. &lt;/p&gt;
&lt;p&gt;You can use mpc to control playback with mpd, but you&amp;#39;ll probably want something more user-friendly. Here&amp;#39;s a &lt;a href=&quot;http://mpd.wikia.com/wiki/Clients&quot;&gt;laundry list of players&lt;/a&gt; you can use to control mpd. I prefer ncmpcpp, a command-line player, because I spend a lot of time in the terminal anyway. And, as you might have noticed, I want a lightning-fast client.&lt;/p&gt;
&lt;p&gt;Install ncmpcpp:&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs bash&quot;&gt;brew install ncmpcpp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;#39;s my super-complex ncmpcpp configuration file (at &lt;code&gt;~/.ncmpcpp/config&lt;/code&gt;):&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs ini&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;ignore_leading_the&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;yes&lt;/span&gt;  # Alphabetize &lt;span class=&quot;hljs-string&quot;&gt;&quot;The Beatles&quot;&lt;/span&gt; with &lt;span class=&quot;hljs-string&quot;&gt;&quot;B&quot;&lt;/span&gt; instead of &lt;span class=&quot;hljs-string&quot;&gt;&quot;T&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run ncmpcpp in the terminal:&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs bash&quot;&gt;ncmpcpp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&amp;#39;ll see a playlist screen. (Pro tip: if you&amp;#39;re using iTerm 2 v3 and you see a bunch of q&amp;#39;s instead of nice lines in the UI, &lt;a href=&quot;../img/iterm2.png&quot;&gt;enable this iTerm option.&lt;/a&gt;) To browse your music library, hit tab. You can search this screen by typing &lt;code&gt;/&lt;/code&gt; and then a search term, and hitting &lt;code&gt;.&lt;/code&gt; to find the next match. To go a level deeper in the folder structure, hit return on a folder. To add a folder or file to your playlist, hit space. If you want more control over how it&amp;#39;s added, hit &lt;code&gt;a&lt;/code&gt; instead. There&amp;#39;s also a slightly cleaner media library view that you can find by hitting &lt;code&gt;4&lt;/code&gt;. To start playback, hit tab again to return to the playlist screen and press return. There&amp;#39;s a more advanced search interface available by typing &lt;code&gt;3&lt;/code&gt;—press return on a category, type your query, and hit &lt;code&gt;y&lt;/code&gt; to see the results. You can find out &lt;a href=&quot;http://rybczak.net/ncmpcpp/&quot;&gt;more about ncmpcpp here&lt;/a&gt;. Hit &lt;code&gt;F1&lt;/code&gt; to see the help screen.&lt;/p&gt;
&lt;p&gt;You can quit ncmpcpp by typing &lt;code&gt;q&lt;/code&gt;. But remember: the music will keep playing. If you want to toggle play/pause without opening ncmpcpp, you can use mpc from the terminal:&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs bash&quot;&gt;mpc toggle
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://vine.co/v/i9h6xBYrKJj&quot;&gt;Sheesh.&lt;/a&gt; You&amp;#39;re probably used to using the media keys on your keyboard to control audio playback. Those keys are a bit finicky, but we can whip up a nice subsitute with &lt;a href=&quot;https://www.alfredapp.com&quot;&gt;Alfred.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../img/musiclibrary/mpdWorkflow.png&quot; alt=&quot;mpd workflow in Alfred&quot;&gt;&lt;/p&gt;
&lt;p&gt;The mappings are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Toggle play/pause: ⌥] - &lt;code&gt;/usr/local/bin/mpc toggle&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Skip to the next song: ⌥\ - &lt;code&gt;/usr/local/bin/mpc next&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Restart the current song: ⌥[ - &lt;code&gt;/usr/local/bin/mpc seek 0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I like listening to whole albums, so I added another workflow that lets me type, for example, &lt;code&gt;a 808s&lt;/code&gt; in Alfred to add the album or albums matching &amp;quot;808s&amp;quot; to my current playlist. Alfred and mpd &lt;a href=&quot;https://streamable.com/9szx&quot;&gt;on an ultralight beam&lt;/a&gt;:&lt;/p&gt;
&lt;iframe src=&quot;//giphy.com/embed/l41YnPIEMc9cITlg4&quot; frameBorder=&quot;0&quot; width=&quot;600&quot; height=&quot;327&quot; class=&quot;giphy-embed&quot; allowFullScreen&gt;&lt;/iframe&gt;

&lt;p&gt;You can &lt;a href=&quot;../toys/musiclibrary/mpd.alfredworkflow&quot;&gt;download my Alfred workflow to control mpd.&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;syncing-with-the-iphone&quot;&gt;Syncing with the iPhone&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ve shed my dependence on iTunes using beets, mpd, ncmpcpp, and Alfred, but I still need to use it to sync my music to my iPhone. There&amp;#39;s an easy way to manage this. First, make sure you remove iTunes&amp;#39;s privilege to manage your music library for you. In iTunes, go to Advanced Preferences and uncheck &amp;quot;Keep Music folder organized&amp;quot; and &amp;quot;Copy files to iTunes Media when adding to library.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../img/musiclibrary/iTunesPrefs.png&quot; alt=&quot;iTunes advanced preferences&quot;&gt;&lt;/p&gt;
&lt;p&gt;We can automatically create a playlist that contains all of our music every time we import new music into beets. Modify &lt;code&gt;~/.config/beets/config.yaml&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs yaml&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;smartplaylist:&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;    playlist_dir:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;~/.mpd/playlists&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;    playlists:&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;        - name:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;all.m3u&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;          query:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;''&lt;/span&gt;                  &lt;span class=&quot;hljs-comment&quot;&gt;# Matches all music in your library&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, after you import something with &lt;code&gt;beet import&lt;/code&gt;, open &lt;code&gt;~/.mpd/playlists&lt;/code&gt; and drag &lt;code&gt;all.m3u&lt;/code&gt; into iTunes. iTunes is smart enough to only add the new files to your library. Then you can sync with your iPhone and go about your life mostly iTunes-free.&lt;/p&gt;
&lt;h2 id=&quot;bonus-scrobbling-to-last-fm&quot;&gt;Bonus: Scrobbling to last.fm&lt;/h2&gt;
&lt;p&gt;If you&amp;#39;re obsessive enough to install and learn all these new tools, you are probably a last.fm fanatic &lt;a href=&quot;http://www.last.fm/user/StevoX&quot;&gt;like me.&lt;/a&gt; It&amp;#39;s easy to setup last.fm scrobbling with mpd. First install mpdscribble:&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs bash&quot;&gt;brew install mpdscribble
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and run the command that homebrew gives you to start mpdscribble on login. Edit the last.fm section of &lt;code&gt;/usr/local/etc/mpdscribble.conf&lt;/code&gt; with your username and password:&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs ini&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# The port that the MPD listens on and mpdscribble should try to&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;# connect to.  Defaults to $MPD_PORT or 6600.&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;#port = 6600&lt;/span&gt;
&lt;span class=&quot;hljs-section&quot;&gt;
[last.fm]&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt; = http://post.audioscrobbler.com/
&lt;span class=&quot;hljs-attr&quot;&gt;username&lt;/span&gt; = YOUR_LASTFM_USERNAME
&lt;span class=&quot;hljs-attr&quot;&gt;password&lt;/span&gt; = YOUR_LASTFM_PASSWORD
&lt;span class=&quot;hljs-comment&quot;&gt;# The file where mpdscribble should store its Last.fm journal in case&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;# you do not have a connection to the Last.fm server.&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;journal&lt;/span&gt; = /var/cache/mpdscribble/lastfm.journal
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mpdscribble will now scrobble everything that mpd plays.&lt;/p&gt;
&lt;h2 id=&quot;bonus-ripping-cds-what-s-a-cd-&quot;&gt;Bonus: Ripping CDs (What&amp;#39;s a CD?)&lt;/h2&gt;
&lt;p&gt;CDs are dumb. If you absolutely must, use abcde to rip CDs. It&amp;#39;s great (well, as great as a tool can be for turning a dumb thing into a not dumb thing).&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs bash&quot;&gt;brew install abcde cdparanoia eyeD3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://www.andrews-corner.org/abcde.html#mp3&quot;&gt;Here&amp;#39;s the &lt;code&gt;~/.abcde.conf&lt;/code&gt; that I use for ripping CDs to mp3s.&lt;/a&gt; You can run it by inserting a CD and entering the command&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs bash&quot;&gt;abcde
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to rip the CD in the drive. That is, if you even have a CD drive.&lt;/p&gt;
&lt;h2 id=&quot;bonus-backup&quot;&gt;Bonus: Backup&lt;/h2&gt;
&lt;p&gt;I keep my &lt;code&gt;~/Music/beets&lt;/code&gt; folder synced between all of my computers using &lt;a href=&quot;https://getsync.com&quot;&gt;Resilio Sync (née BitTorrent Sync)&lt;/a&gt;. You could also use something like Google Drive or Dropbox if you want to pay for those. The nice thing about Sync is that it keeps everything in sync between all of your computers without requiring cloud storage.&lt;/p&gt;
&lt;p&gt;You could also use an open source solution here, like &lt;a href=&quot;https://syncthing.net&quot;&gt;syncthing&lt;/a&gt; or writing some scripts around &lt;code&gt;rsync&lt;/code&gt; or something. Resilio Sync is easy to setup and works great for my simple use case.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;We did it! We don&amp;#39;t need iTunes anymore &lt;em&gt;except to sync to the phone, grumble grumble&lt;/em&gt;. It feels great, doesn&amp;#39;t it? We went from this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../img/musiclibrary/iTunesActivity.png&quot; alt=&quot;iTunes memory usage&quot;&gt;&lt;/p&gt;
&lt;p&gt;to this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../img/musiclibrary/mpdActivity.png&quot; alt=&quot;mpd memory usage&quot;&gt;&lt;/p&gt;
&lt;p&gt;while doing nothing but playing a song.&lt;/p&gt;
&lt;p&gt;In addition to the obvious benefits you get from using The Right Tool For The Job, each of these tools has oodles of options that you can tweak to perfect your music organizing and listening experience. For example, we barely used any of the functionality of beets, and &lt;a href=&quot;http://beets.readthedocs.io/en/latest/plugins/index.html&quot;&gt;look at all these plugins!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>speecheditor: an audio story editing tool</title>
			<link href="https://ssrubin.com/posts/speecheditor-an-audio-story-editing-tool.html"/>
			<updated>2015-01-29T08:00:00.000Z</updated>
			<id>https://ssrubin.com/posts/speecheditor-an-audio-story-editing-tool.html</id>
			<content type="html">&lt;p&gt;Today we&amp;#39;ve released our &lt;a href=&quot;https://ucbvislab.github.io/speecheditor&quot;&gt;speecheditor&lt;/a&gt;, a web app for editing and adding musical scores to audio stories. Instead of editing speech using waveforms, the speecheditor allows you to edit audio with text, like a word processor. Likewise, it allows users to easily loop musical tracks and add &lt;a href=&quot;http://vis.berkeley.edu/papers/underscore&quot;&gt;musical underlays&lt;/a&gt; à la This American Life. The speecheditor is described in detail in our paper, &lt;a href=&quot;http://vis.berkeley.edu/papers/audiostories&quot;&gt;&amp;quot;Content-based Tools for Editing Audio Stories.&amp;quot;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The speecheditor is research code. To that extent, this release is a polished prototype &amp;ndash; there are bound to be bugs that arise (please file those on the github issues page!) but we&amp;#39;ve had a lot of fun editing audio stories with this system and we believe it&amp;#39;s a powerful paradigm for DAWs of the future. We&amp;#39;re excited to have other creators try it out!&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Browsers, Mechanical Turk, and external HITs</title>
			<link href="https://ssrubin.com/posts/browsers-mturk-and-external-hits.html"/>
			<updated>2013-11-13T08:00:00.000Z</updated>
			<id>https://ssrubin.com/posts/browsers-mturk-and-external-hits.html</id>
			<content type="html">&lt;p&gt;I had a lot of experiments running on &lt;a href=&quot;http://mturk.com&quot;&gt;Mechanical Turk&lt;/a&gt; this summer as ExternalHITs. In MTurk parlance, this means that the tasks were hosted on my research group&amp;#39;s server and embedded in Mechanical Turk via an &lt;code&gt;iframe&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I started posting tasks again recently, and my external HITs were no longer working. Chrome was blocking the content, because mturk is https and my external content was running on http. Thanks to this &lt;a href=&quot;http://wiki.bcs.rochester.edu/HlpLab/MTurkExperiments&quot;&gt;U Rochester site&lt;/a&gt; for steering me in the right direction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; If your external HITs mysteriously stop working on Mechanical Turk (or if it seems like many fewer people are doing your hits than before), blame it on  updated browsers and their &lt;s&gt;draconian&lt;/s&gt; new security settings, and start serving https content from your server.&lt;/p&gt;</content>
		</entry>
	
		<entry>
			<title>A web-first research methodology</title>
			<link href="https://ssrubin.com/posts/web-first.html"/>
			<updated>2013-04-25T07:00:00.000Z</updated>
			<id>https://ssrubin.com/posts/web-first.html</id>
			<content type="html">&lt;p&gt;When I started grad school in the Fall of 2011, I didn&amp;#39;t consider
myself to be an excellent programmer or a &lt;a href=&quot;http://news.ycombinator.com&quot;&gt;hacker&lt;/a&gt; or anything
like that. On the other hand, I did consider myself to be an
exceptional googler and &lt;a href=&quot;http://hci.stanford.edu/research/opportunistic/&quot;&gt;tinkerer&lt;/a&gt;; I could usually scrounge
up a solution to my current programming problem without much
difficulty.&lt;/p&gt;
&lt;p&gt;My first research project in grad school involved a javascript-heavy
experiment that we were going to deploy to Mechanical Turk. I had done
my fair share of tinkering with client-side (HTML/CSS) and server-side
(Rails) web development, but I had always avoided javascript. No, I
don&amp;#39;t know why.&lt;/p&gt;
&lt;p&gt;Eager to show my collaborators that I was capable of writing code that
worked and writing it quickly, I dove into javascript&amp;#39;s prototypical
deep end. My code, hideous as it was, worked fine and allowed for
rapid iteration.&lt;/p&gt;
&lt;p&gt;Just to expand on the aforementioned hideousness, we&amp;#39;re talking a
whole mess of global variables and inline HTML:&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;'body'&lt;/span&gt;).prepend(&lt;span class=&quot;hljs-string&quot;&gt;'&amp;lt;span id=&quot;codespan&quot;&amp;gt;&amp;lt;strong&amp;gt;Enter your code: &amp;lt;/strong&amp;gt;&amp;lt;input style=&quot;display: inline&quot; id=&quot;turkcode&quot; type=&quot;text&quot; name=&quot;turkcode&quot;&amp;gt;&amp;lt;/input&amp;gt;&amp;lt;button id=&quot;codebutton&quot;&amp;gt;Submit&amp;lt;/button&amp;gt;&amp;lt;/span&amp;gt;'&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oh dear.&lt;/p&gt;
&lt;p&gt;My intention isn&amp;#39;t to call out how bad I was at javascript a year and
half ago. I was inspired by the process. That project necessitated
that I build a web app, but my projects since then have been more
flexible. But all of my (and your, I&amp;#39;m guessing) research
collaborators have a somewhat unbelievable number of devices that can
access the web, so ideally, my research should live on the web instead
of in some C++ or Java code that may not ever be compiled on anyone
else&amp;#39;s machine.&lt;/p&gt;
&lt;p&gt;This idea of web-first research manifests itself it a number of ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Whenever I&amp;#39;m building an interface, I will try to make it a web app
as opposed to a native GUI.&lt;ul&gt;
&lt;li&gt;Remote collaborators can see what I&amp;#39;m working on without
downloading and compiling code, getting the proper libraries
installed, debugging platform-specific issues, and so on.&lt;/li&gt;
&lt;li&gt;Everyone wants scientists to release their code. Once published,
web-based projects are easy to disseminate because they&amp;#39;re already
running in-browser.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For each project, I maintain a private website to track progress,
results, and ideas. If someone misses a meeting, they can just check
the site to see what&amp;#39;s going on.&lt;/li&gt;
&lt;li&gt;I like learning new programming languages and frameworks. The web is
constantly evolving, so I have the opportunity to learn and extend
tons of cool web-related technologies and tools. So far in grad
school: &lt;a href=&quot;http://webpy.org/&quot;&gt;web.py&lt;/a&gt;, &lt;a href=&quot;http://flask.pocoo.org/&quot;&gt;flask&lt;/a&gt;, &lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;django&lt;/a&gt;,
&lt;a href=&quot;http://nodejs.org/&quot;&gt;node.js&lt;/a&gt;, &lt;a href=&quot;http://www.sqlalchemy.org/&quot;&gt;SQLAlchemy&lt;/a&gt;, &lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;dojo&lt;/a&gt;, &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt;,
&lt;a href=&quot;http://jqueryui.com/&quot;&gt;jQuery UI&lt;/a&gt;, &lt;a href=&quot;http://underscorejs.org/&quot;&gt;underscore&lt;/a&gt;, &lt;a href=&quot;http://coffeescript.org/&quot;&gt;coffeescript&lt;/a&gt;,
&lt;a href=&quot;http://docpad.org&quot;&gt;docpad&lt;/a&gt; and many more. Being able to learn these tools while
I&amp;#39;m doing my research is a highly-motivational mixture of work and
play.&lt;/li&gt;
&lt;li&gt;Rapid iteration for the web is, well, rapid. This applies to high-
level languages in general. Sure, algorithms are going to run a bit
slower, but only invest the time in highly optimized implementations
if your research depends on it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Web-first research doesn&amp;#39;t make sense for all areas of research, but I
encourage other graduate students (HCI and otherwise) to think about
these things as they&amp;#39;re working on projects.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Site redesign</title>
			<link href="https://ssrubin.com/posts/redesign.html"/>
			<updated>2013-04-15T07:00:00.000Z</updated>
			<id>https://ssrubin.com/posts/redesign.html</id>
			<content type="html">&lt;p&gt;I&amp;#39;m working on an (admittedly simple) redesign of my site. I may
change things significantly from this form because&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I am indecisive, and&lt;/li&gt;
&lt;li&gt;This is fun.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One obvious difference is that there is a section here for &amp;quot;posts.&amp;quot;
I&amp;#39;m not sure exactly what&amp;#39;s going to become of this section. I might
end up scrapping it in the future. But for now, it&amp;#39;s here. I have a
soft spot for blogging. When I first purchased this domain when I was
in 7th grade, I wrote a blog that was horribly written and often
banal, but my friends kept reading, so I kept writing.&lt;/p&gt;
&lt;p&gt;As a graduate student, I probably have more interesting things to say
now than I did back then. Probably.&lt;/p&gt;
</content>
		</entry>
	
</feed>